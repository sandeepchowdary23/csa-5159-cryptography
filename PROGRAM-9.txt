#include <stdio.h>
#include <string.h>
#define SIZE 5
void generateKeyTable(char key[], char keyTable[SIZE][SIZE]) {
    int dict[26] = {0}, k = 0;
    for (int i = 0; key[i]; i++) {
        if (key[i] != 'J' && !dict[key[i] - 'A']) keyTable[k / SIZE][k % SIZE] = key[i], dict[key[i] - 'A'] = 1, k++;
    }
    for (int i = 0; i < 26; i++) {
        if (!dict[i] && i != 'J' - 'A') keyTable[k / SIZE][k % SIZE] = 'A' + i, k++;
    }
}
void findPos(char keyTable[SIZE][SIZE], char ch, int pos[2]) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE * SIZE; i++) {
        if (keyTable[i / SIZE][i % SIZE] == ch) pos[0] = i / SIZE, pos[1] = i % SIZE;
    }
}
void decryptPair(char keyTable[SIZE][SIZE], char a, char b, char* out) {
    int pos1[2], pos2[2];
    findPos(keyTable, a, pos1);
    findPos(keyTable, b, pos2);
    if (pos1[0] == pos2[0]) out[0] = keyTable[pos1[0]][(pos1[1] + SIZE - 1) % SIZE], out[1] = keyTable[pos2[0]][(pos2[1] + SIZE - 1) % SIZE];
    else if (pos1[1] == pos2[1]) out[0] = keyTable[(pos1[0] + SIZE - 1) % SIZE][pos1[1]], out[1] = keyTable[(pos2[0] + SIZE - 1) % SIZE][pos2[1]];
    else out[0] = keyTable[pos1[0]][pos2[1]], out[1] = keyTable[pos2[0]][pos1[1]];
}
void decryptMessage(char keyTable[SIZE][SIZE], char* msg, char* out) {
    for (int i = 0; msg[i]; i += 2) decryptPair(keyTable, msg[i], msg[i + 1], out + i);
    out[strlen(msg)] = '\0';
}
int main() {
    char key[] = "MONARCHY", keyTable[SIZE][SIZE];
    char message[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char decrypted[sizeof(message)];
    generateKeyTable(key, keyTable);
    decryptMessage(keyTable, message, decrypted);
    printf("Decrypted Message: %s\n", decrypted);
    return 0;
}

OUTPUT:
Decrypted Message: IZGKCWMKCIXVFCGUNDLZCFHGTIMKCFFNHGGXSSLZMPITHDXBFVHALKKXMOSZYHYAQKMOGCMLXVNKBTMOISHAWCZNCFAXOBCWLIYT
